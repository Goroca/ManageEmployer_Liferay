/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.telefonica.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.telefonica.model.Department;
import com.telefonica.model.DepartmentModel;
import com.telefonica.model.DepartmentSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Department service. Represents a row in the &quot;manageEmployer_Department&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.telefonica.model.DepartmentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DepartmentImpl}.
 * </p>
 *
 * @author carlos
 * @see DepartmentImpl
 * @see com.telefonica.model.Department
 * @see com.telefonica.model.DepartmentModel
 * @generated
 */
@JSON(strict = true)
public class DepartmentModelImpl extends BaseModelImpl<Department>
	implements DepartmentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a department model instance should use the {@link com.telefonica.model.Department} interface instead.
	 */
	public static final String TABLE_NAME = "manageEmployer_Department";
	public static final Object[][] TABLE_COLUMNS = {
			{ "idDept", Types.INTEGER },
			{ "nameDept", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table manageEmployer_Department (idDept INTEGER not null primary key,nameDept VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table manageEmployer_Department";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.telefonica.model.Department"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.telefonica.model.Department"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Department toModel(DepartmentSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Department model = new DepartmentImpl();

		model.setIdDept(soapModel.getIdDept());
		model.setNameDept(soapModel.getNameDept());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Department> toModels(DepartmentSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Department> models = new ArrayList<Department>(soapModels.length);

		for (DepartmentSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.telefonica.model.Department"));

	public DepartmentModelImpl() {
	}

	public int getPrimaryKey() {
		return _idDept;
	}

	public void setPrimaryKey(int primaryKey) {
		setIdDept(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Integer(_idDept);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	public Class<?> getModelClass() {
		return Department.class;
	}

	public String getModelClassName() {
		return Department.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("idDept", getIdDept());
		attributes.put("nameDept", getNameDept());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer idDept = (Integer)attributes.get("idDept");

		if (idDept != null) {
			setIdDept(idDept);
		}

		String nameDept = (String)attributes.get("nameDept");

		if (nameDept != null) {
			setNameDept(nameDept);
		}
	}

	@JSON
	public int getIdDept() {
		return _idDept;
	}

	public void setIdDept(int idDept) {
		_idDept = idDept;
	}

	@JSON
	public String getNameDept() {
		if (_nameDept == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameDept;
		}
	}

	public void setNameDept(String nameDept) {
		_nameDept = nameDept;
	}

	@Override
	public Department toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Department)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		DepartmentImpl departmentImpl = new DepartmentImpl();

		departmentImpl.setIdDept(getIdDept());
		departmentImpl.setNameDept(getNameDept());

		departmentImpl.resetOriginalValues();

		return departmentImpl;
	}

	public int compareTo(Department department) {
		int primaryKey = department.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Department department = null;

		try {
			department = (Department)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		int primaryKey = department.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Department> toCacheModel() {
		DepartmentCacheModel departmentCacheModel = new DepartmentCacheModel();

		departmentCacheModel.idDept = getIdDept();

		departmentCacheModel.nameDept = getNameDept();

		String nameDept = departmentCacheModel.nameDept;

		if ((nameDept != null) && (nameDept.length() == 0)) {
			departmentCacheModel.nameDept = null;
		}

		return departmentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{idDept=");
		sb.append(getIdDept());
		sb.append(", nameDept=");
		sb.append(getNameDept());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.telefonica.model.Department");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>idDept</column-name><column-value><![CDATA[");
		sb.append(getIdDept());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameDept</column-name><column-value><![CDATA[");
		sb.append(getNameDept());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Department.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Department.class
		};
	private int _idDept;
	private String _nameDept;
	private Department _escapedModelProxy;
}