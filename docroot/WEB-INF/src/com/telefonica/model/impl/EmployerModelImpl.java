/**
 * Copyright (c) 2000-2012 Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.telefonica.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.telefonica.model.Employer;
import com.telefonica.model.EmployerModel;
import com.telefonica.model.EmployerSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the Employer service. Represents a row in the &quot;manageEmployer_Employer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.telefonica.model.EmployerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployerImpl}.
 * </p>
 *
 * @author carlos
 * @see EmployerImpl
 * @see com.telefonica.model.Employer
 * @see com.telefonica.model.EmployerModel
 * @generated
 */
@JSON(strict = true)
public class EmployerModelImpl extends BaseModelImpl<Employer>
	implements EmployerModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a employer model instance should use the {@link com.telefonica.model.Employer} interface instead.
	 */
	public static final String TABLE_NAME = "manageEmployer_Employer";
	public static final Object[][] TABLE_COLUMNS = {
			{ "idEmployer", Types.INTEGER },
			{ "nameEmployer", Types.VARCHAR },
			{ "idDept", Types.INTEGER },
			{ "photo", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table manageEmployer_Employer (idEmployer INTEGER not null primary key,nameEmployer VARCHAR(75) null,idDept INTEGER,photo VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table manageEmployer_Employer";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.telefonica.model.Employer"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.telefonica.model.Employer"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static Employer toModel(EmployerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		Employer model = new EmployerImpl();

		model.setIdEmployer(soapModel.getIdEmployer());
		model.setNameEmployer(soapModel.getNameEmployer());
		model.setIdDept(soapModel.getIdDept());
		model.setPhoto(soapModel.getPhoto());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<Employer> toModels(EmployerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<Employer> models = new ArrayList<Employer>(soapModels.length);

		for (EmployerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.telefonica.model.Employer"));

	public EmployerModelImpl() {
	}

	public int getPrimaryKey() {
		return _idEmployer;
	}

	public void setPrimaryKey(int primaryKey) {
		setIdEmployer(primaryKey);
	}

	public Serializable getPrimaryKeyObj() {
		return new Integer(_idEmployer);
	}

	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Integer)primaryKeyObj).intValue());
	}

	public Class<?> getModelClass() {
		return Employer.class;
	}

	public String getModelClassName() {
		return Employer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("idEmployer", getIdEmployer());
		attributes.put("nameEmployer", getNameEmployer());
		attributes.put("idDept", getIdDept());
		attributes.put("photo", getPhoto());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Integer idEmployer = (Integer)attributes.get("idEmployer");

		if (idEmployer != null) {
			setIdEmployer(idEmployer);
		}

		String nameEmployer = (String)attributes.get("nameEmployer");

		if (nameEmployer != null) {
			setNameEmployer(nameEmployer);
		}

		Integer idDept = (Integer)attributes.get("idDept");

		if (idDept != null) {
			setIdDept(idDept);
		}

		String photo = (String)attributes.get("photo");

		if (photo != null) {
			setPhoto(photo);
		}
	}

	@JSON
	public int getIdEmployer() {
		return _idEmployer;
	}

	public void setIdEmployer(int idEmployer) {
		_idEmployer = idEmployer;
	}

	@JSON
	public String getNameEmployer() {
		if (_nameEmployer == null) {
			return StringPool.BLANK;
		}
		else {
			return _nameEmployer;
		}
	}

	public void setNameEmployer(String nameEmployer) {
		_nameEmployer = nameEmployer;
	}

	@JSON
	public int getIdDept() {
		return _idDept;
	}

	public void setIdDept(int idDept) {
		_idDept = idDept;
	}

	@JSON
	public String getPhoto() {
		if (_photo == null) {
			return StringPool.BLANK;
		}
		else {
			return _photo;
		}
	}

	public void setPhoto(String photo) {
		_photo = photo;
	}

	@Override
	public Employer toEscapedModel() {
		if (_escapedModelProxy == null) {
			_escapedModelProxy = (Employer)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelProxyInterfaces,
					new AutoEscapeBeanHandler(this));
		}

		return _escapedModelProxy;
	}

	@Override
	public Object clone() {
		EmployerImpl employerImpl = new EmployerImpl();

		employerImpl.setIdEmployer(getIdEmployer());
		employerImpl.setNameEmployer(getNameEmployer());
		employerImpl.setIdDept(getIdDept());
		employerImpl.setPhoto(getPhoto());

		employerImpl.resetOriginalValues();

		return employerImpl;
	}

	public int compareTo(Employer employer) {
		int primaryKey = employer.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}

		Employer employer = null;

		try {
			employer = (Employer)obj;
		}
		catch (ClassCastException cce) {
			return false;
		}

		int primaryKey = employer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<Employer> toCacheModel() {
		EmployerCacheModel employerCacheModel = new EmployerCacheModel();

		employerCacheModel.idEmployer = getIdEmployer();

		employerCacheModel.nameEmployer = getNameEmployer();

		String nameEmployer = employerCacheModel.nameEmployer;

		if ((nameEmployer != null) && (nameEmployer.length() == 0)) {
			employerCacheModel.nameEmployer = null;
		}

		employerCacheModel.idDept = getIdDept();

		employerCacheModel.photo = getPhoto();

		String photo = employerCacheModel.photo;

		if ((photo != null) && (photo.length() == 0)) {
			employerCacheModel.photo = null;
		}

		return employerCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(9);

		sb.append("{idEmployer=");
		sb.append(getIdEmployer());
		sb.append(", nameEmployer=");
		sb.append(getNameEmployer());
		sb.append(", idDept=");
		sb.append(getIdDept());
		sb.append(", photo=");
		sb.append(getPhoto());
		sb.append("}");

		return sb.toString();
	}

	public String toXmlString() {
		StringBundler sb = new StringBundler(16);

		sb.append("<model><model-name>");
		sb.append("com.telefonica.model.Employer");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>idEmployer</column-name><column-value><![CDATA[");
		sb.append(getIdEmployer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nameEmployer</column-name><column-value><![CDATA[");
		sb.append(getNameEmployer());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>idDept</column-name><column-value><![CDATA[");
		sb.append(getIdDept());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>photo</column-name><column-value><![CDATA[");
		sb.append(getPhoto());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Employer.class.getClassLoader();
	private static Class<?>[] _escapedModelProxyInterfaces = new Class[] {
			Employer.class
		};
	private int _idEmployer;
	private String _nameEmployer;
	private int _idDept;
	private String _photo;
	private Employer _escapedModelProxy;
}